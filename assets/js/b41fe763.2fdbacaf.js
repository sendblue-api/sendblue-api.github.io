"use strict";(self.webpackChunksendblue_api=self.webpackChunksendblue_api||[]).push([[385],{3552:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>r,contentTitle:()=>u,default:()=>c,frontMatter:()=>o,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"status","title":"Message Status | Sendblue Documentation","description":"Determining Message Status | iMessage for Business - Sendblue","source":"@site/docs/status.md","sourceDirName":".","slug":"/status","permalink":"/docs/status","draft":false,"unlisted":false,"editUrl":"https://github.com/sendblue-api/sendblue-api.github.io/blob/gh-pages/docs/docs/status.md","tags":[],"version":"current","frontMatter":{"id":"status","title":"Message Status | Sendblue Documentation","description":"Determining Message Status | iMessage for Business - Sendblue","sidebar_label":"Message Status"},"sidebar":"someSidebar","previous":{"title":"Limits & Queues","permalink":"/docs/message-limits"},"next":{"title":"Sending a Contact Card","permalink":"/docs/contact-card"}}');var a=t(4848),i=t(8453);const o={id:"status",title:"Message Status | Sendblue Documentation",description:"Determining Message Status | iMessage for Business - Sendblue",sidebar_label:"Message Status"},u=void 0,r={},d=[{value:"Resolving Pending Message Status",id:"resolving-pending-message-status",level:2},{value:"Authentication",id:"authentication",level:3},{value:"Making the Request",id:"making-the-request",level:3}];function l(e){const s={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(s.h2,{id:"resolving-pending-message-status",children:"Resolving Pending Message Status"}),"\n",(0,a.jsxs)(s.p,{children:["A request you make will usually come back with a status of ",(0,a.jsx)(s.code,{children:"QUEUED"}),". This will be most common when you batch several requests together. In such a scenario, it is important that you are aware of the final status of the message, so that you don't double message a user. In order to get the final status of your message, you may query the ",(0,a.jsx)(s.code,{children:"/api/status"})," endpoint."]}),"\n",(0,a.jsx)(s.h3,{id:"authentication",children:"Authentication"}),"\n",(0,a.jsx)(s.p,{children:"Just like any other request to the API, make sure you include your credentials in the appropriate headers:"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-js",children:'"sb-api-key-id": <<apiKey>>\n"sb-api-secret-key": <<apiSecret>>\n'})}),"\n",(0,a.jsx)(s.h3,{id:"making-the-request",children:"Making the Request"}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.code,{children:"GET https://api.sendblue.co/api/status"})}),"\n",(0,a.jsx)(s.p,{children:'To specify which message you would like to receive a status update on, use a query param with the key = "handle" and the value = the message handle of the message you are interested in.'}),"\n",(0,a.jsxs)(s.p,{children:["Query parameter: ",(0,a.jsx)(s.code,{children:"?handle={{message_handle}}"})]}),"\n",(0,a.jsxs)(s.p,{children:["The message handle is included in every response when you call ",(0,a.jsx)(s.a,{href:"/docs/outbound",children:"/api/send-message"}),". So you can also query messages that you have already received the status of, if you would like."]})]})}function c(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,a.jsx)(s,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},8453:(e,s,t)=>{t.d(s,{R:()=>o,x:()=>u});var n=t(6540);const a={},i=n.createContext(a);function o(e){const s=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function u(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),n.createElement(i.Provider,{value:s},e.children)}}}]);